version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: library-db
    environment:
      POSTGRES_USER: library_user
      POSTGRES_PASSWORD: library_password_2024
      POSTGRES_DB: library_management
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U library_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: library-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - library-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: library-server
    environment:
      PORT: 8000
      GIN_MODE: release
      ENVIRONMENT: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: library_user
      DB_PASSWORD: library_password_2024
      DB_NAME: library_management
      DB_SSL_MODE: disable
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_change_this}
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - library-network
    restart: unless-stopped

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost:8000
    container_name: library-client
    ports:
      - "3000:80"
    networks:
      - library-network
    depends_on:
      - server
    restart: unless-stopped

networks:
  library-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: